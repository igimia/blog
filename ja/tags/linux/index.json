[{"content":"概要 コメントを投稿できる機能を追加する。\n調べてみたらdisqusを利用した方法が多かったのでそれを利用してさっくりやってみる。\nやってみる   ユーザ登録\ndisqusにアクセスし、SignUpする。\n  サイトの登録\n利用したいサイトを登録する。私の場合こんな感じ。\nコメントの機能だけ使いたいのでBasic（無料）を選択する。\n対応するプラットフォームがなかったためinstall manuallyを選択する。\nコメント入力時のcolor schemaなどdisqusに関する設定を行う。 今回はこんな感じにした。\nモデレーションのタイプを選択する。\n後から変更可能とのことなので一旦strictを設定。\n  参考 参考にさせていただきました。ありがとうございました。\n Hugo で作ったブログに Disqus を使ってコメント機能を追加する Add Disqus(HUGO公式)  ","description":"","id":2,"section":"posts","tags":null,"title":"ブログにコメント機能を追加する(disqus)","uri":"https://www.anypalette.com/ja/posts/20210103_add_blog_comment/"},{"content":"概要 今回はテスト実行前、実行後（setup, teardown）の処理についてまとめる。\n使い方 @pytest.fixture()というデコレータを設定すればよい。\nyield以降はテストが実行された後に実行される（teardown）。\n使いたいテスト関数の引数にfixtureの関数名を指定すると使うことができる。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  import pytest @pytest.fixture def pre_function(): print(\u0026#34;\\n実行前\u0026#34;) yield \u0026#34;以降は試験実行後に処理される\u0026#34; print(\u0026#34;\\n実行後\u0026#34;) def test_setup_teardown_1(pre_function): print(\u0026#34;test_1\u0026#34;) # 試験データ a = 1 b = 1 assert a == b, \u0026#34;aaa\u0026#34; def test_setup_teardown_2(): print(\u0026#34;test_2\u0026#34;) # 試験データ a = 2 b = 2 assert a == b   実行結果は以下のようになる。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  pytest tests/test_setup_teardown.py --capture=no  1 ✘  23:14:41  ======================================================================================== test session starts ======================================================================================== platform darwin -- Python 3.9.0, pytest-6.2.1, py-1.10.0, pluggy-0.13.1 rootdir: /Users/hogehoge/ plugins: html-3.1.1, metadata-1.11.0, cov-2.10.1 collected 2 items tests/test_setup_teardown.py 実行前 test_1 . 実行後 test_2 . ========================================================================================= 2 passed in 0.01s =========================================================================================   @pytest.fixtureには色々なオプションを指定することが可能（詳細は公式参照）。 中でもscopeとautouseはよく使うと思うので一応まとめてみる。\nscope scope=\u0026quot;スコープ名\u0026quot;の形式で設定する（デフォルトはfunction）。fixtureのスコープ（適用範囲）を指定できる。\nfunction, class, module, package, sessionのうちから選ぶ。\n   スコープ名 説明 例(以下試してみたで利用した名前)     function テスト関数の実行前後で setup/teardownが実行される。デフォルト。 test_function_1   class テストクラスの実行前後で 〃 。 TestClass   module テストモジュールの実行前後で 〃 。 test_scope_1.py   package テストパッケージの前後で 〃 。 scope/package1   session 全体通して一回setup/teardownが実行される。 -    autouse autouse=True or Falseの形式で設定する（デフォルトはFalse）。Trueを設定すると対象のscopeのテストケースを実行するとき自動的にsetup/teardownしてくれる。\n試験パターンが多くなってくると個別にfixtureの設定をするのがかなり面倒になるため、共通的なものはautouseを利用すると便利。\n試してみた 確認かねて設定したらどんなもんか試してみた。\nmoduleとpackageの動作確認を行うため以下のような構成にした。\n└── tests └── scope ├── package1 | ├── test_scope_1.py # function ~ session まで全種類のfixture設定 | └── test_scope_2.py # fixtureの設定なし（module スコープの動作確認用） └── package2 └── test_package_2.py # fixtureの設定なし（package スコープの動作確認用） package1/test_scope_1.py\n全種類のfixtureを設定し、自動的に対象のスコープの前後処理が行われるように全てautouseはTrueに設定した。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61  import pytest @pytest.fixture(scope=\u0026#34;function\u0026#34;, autouse=True) def pre_function(): scope = \u0026#34;Function\u0026#34; print(f\u0026#34;\\n=== SETUP {scope} ===\u0026#34;) yield print(f\u0026#34;\\n=== TEARDOWN {scope} ===\\n\u0026#34;) @pytest.fixture(scope=\u0026#34;class\u0026#34;, autouse=True) def pre_class(): scope = \u0026#34;Class\u0026#34; print(f\u0026#34;\\n*** SETUP {scope} ***\u0026#34;) yield print(f\u0026#34;\\n*** TEARDOWN {scope} ***\\n\u0026#34;) @pytest.fixture(scope=\u0026#34;module\u0026#34;, autouse=True) def pre_module(): scope = \u0026#34;Module\u0026#34; print(f\u0026#34;\\n--- SETUP {scope} ---\u0026#34;) yield print(f\u0026#34;\\n--- TEARDOWN {scope} ---\\n\u0026#34;) @pytest.fixture(scope=\u0026#34;package\u0026#34;, autouse=True) def pre_package(): scope = \u0026#34;Package\u0026#34; print(f\u0026#34;\\n\u0026lt;\u0026lt;\u0026lt; SETUP {scope} \u0026gt;\u0026gt;\u0026gt;\u0026#34;) yield print(f\u0026#34;\\n\u0026lt;\u0026lt;\u0026lt; TEARDOWN {scope} \u0026gt;\u0026gt;\u0026gt;\\n\u0026#34;) @pytest.fixture(scope=\u0026#34;session\u0026#34;, autouse=True) def pre_session(): scope = \u0026#34;Session\u0026#34; print(f\u0026#34;\\n@@@ SETUP {scope} @@@\u0026#34;) yield print(f\u0026#34;\\n@@@ TEARDOWN {scope} @@@\\n\u0026#34;) def test_function_1(): print(\u0026#34;test_function_1\u0026#34;) # 試験データ a = 1 assert a == 1 class TestClass: def test_class_1(self): print(\u0026#34;test_class_1\u0026#34;) # 試験データ a = 1 assert a == 1 def test_class_2(self): print(\u0026#34;test_class_2\u0026#34;) # 試験データ a = 1 assert a == 1   package1/test_scope_2.py\n1 2 3 4 5 6 7 8 9 10 11 12 13  class TestClass: def test_class_no_fixture(self): print(\u0026#34;\\ntest_class_no_fixture\u0026#34;) # 試験データ a = 1 assert a == 1 def test_function_no_fixture(): print(\u0026#34;\\ntest_function_no_fixture\u0026#34;) # 試験データ a = 1 assert a == 1   実行結果は以下の通り。\n大体想像通りだったが、メンバ関数ではない普通の関数テストも前後にclass scopeの処理が行われるのが想定外だった。\n(python本体のソース見てないが、関数は規定クラスのメンバ関数という位置付けなのかもなと予想。そのうち本体のソース見てみたい。。)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60  $ pytest tests/scope --capture=no ======================================================================================== test session starts ======================================================================================== platform darwin -- Python 3.9.0, pytest-6.2.1, py-1.10.0, pluggy-0.13.1 rootdir: /Users/hogehoge plugins: html-3.1.1, metadata-1.11.0, cov-2.10.1 collected 6 items tests/scope/package1/test_scope_1.py @@@ SETUP Session @@@ \u0026lt;\u0026lt;\u0026lt; SETUP Package \u0026gt;\u0026gt;\u0026gt; --- SETUP Module --- *** SETUP Class *** === SETUP Function === test_function_1 . === TEARDOWN Function === *** TEARDOWN Class *** *** SETUP Class *** === SETUP Function === test_class_1 . === TEARDOWN Function === === SETUP Function === test_class_2 . === TEARDOWN Function === *** TEARDOWN Class *** --- TEARDOWN Module --- tests/scope/package1/test_scope_2.py test_class_no_fixture . test_function_no_fixture . tests/scope/package2/test_package_2.py test_package_2 . \u0026lt;\u0026lt;\u0026lt; TEARDOWN Package \u0026gt;\u0026gt;\u0026gt; @@@ TEARDOWN Session @@@ ========================================================================================= 6 passed in 0.06s =========================================================================================   感想 testsフォルダ直下には一つ前の記事のpytest用スクリプトがあったのでscope動作確認時のフォルダ構成が気持ち悪い感じになった。記事ごとにフォルダ分ければよかった。\n公式をみてみると他にも便利なオプションがたくさんありそうなので、新しいオプション利用する度追記していきたい。\n参考  How do I correctly setup and teardown for my pytest class with tests? docs.pytest.org  ","description":"","id":3,"section":"posts","tags":["Python","test","pytest"],"title":"pytestを使ってみる②【実行前、実行後処理編】","uri":"https://www.anypalette.com/ja/posts/20201231_how_to_pytest_2/"},{"content":"背景 最近仕事でPytestを使ったUnitTestをかく機会があったので使い方を忘れないようにメモ。参考にもあるが、こちらのサイトがすごくわかりやすかった。\n感謝。。。！\nちなみに実行環境はmacで利用しているpythonのバージョンはpython3.9.0です。\npytestとは Python製のテストフレームワークの一つ。似たようなものにunittestがある。unittestは標準で使えるライブラリだが、pytestはライブラリのインストールが必要となる。\nカバレッジを算出したり、結果をhtmlファイルに出力することができて便利。\n基本的な使い方 インストール方法 pipコマンドからインストールが可能\n1  $ pip install pytest   ディレクトリ構成 . ├── src │ ├── main.py │ └── util │ ├── __init__.py │ └── util.py └── tests ├── __init__.py ├── conftest.py └── test_main.py srcとtestsは分けた方が管理しやすいので分割。\nCIなどでtestを実行した時にPATH通るよう、conftest.pyは以下のように書いた。\n1 2 3 4  import sys import os sys.path.append(os.path.abspath(os.path.dirname(os.path.abspath(__file__)) + \u0026#34;/../src/\u0026#34;))   実行したいテストのファイル名はtest_xxx.pyの名前をつけると良い。自動でテスト対象としてみなしてくれる。\n基本的な書き方と実行方法 基本的な書き方 1 2 3 4 5 6 7  def test_main_01(): # 試験実施 a = 1 b = 1 # 結果の検証 assert a == b   実行方法 テストケースをまとめて実行する root（今回の例では.）で実行。\ntests/配下のテストが実行される。\n1  $ pytest .   試験ケースを指定して実行する 例えばtest_main.pyファイル内のtest_main_01を実行したい時は以下のように指定する。\n1 2 3 4 5 6 7 8 9 10 11  $ pytest tests/test_main.py::test_main_2 # \u0026#34;-v\u0026#34;オプションをつけると指定の仕方を確認することができて便利。 $ pytest . -v ======================================================================================== test session starts ======================================================================================== cachedir: .pytest_cache rootdir: /Users/hogehoge/ collected 2 items tests/test_main.py::test_main_01 PASSED [ 50%] tests/test_main.py::test_main_02 PASSED [100%]   そのほか便利な機能 カバレッジを出したい時 pytest-covを利用する。\n1  $ pip install pytest-cov   インストール後、pytestコマンドにオプションをつけることでカバレッジを表示することが可能になる。\n今回の例ではsrc/配下にソースを格納しているためsrcを設定した。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  # \u0026#34;-v\u0026#34;オプションをつけると一つ一つの試験結果が表示され結果が見やすくなる $ pytest -v --cov=src ======================================================================================== test session starts ======================================================================================== cachedir: .pytest_cache rootdir: /Users/hogehoge/ plugins: cov-2.10.1 collected 2 items tests/test_main.py::test_main_1 PASSED [ 50%] tests/test_main.py::test_main_2 PASSED [100%] ---------- coverage: platform darwin, python 3.9.0-final-0 ----------- Name Stmts Miss Cover ------------------------------------------ src/main.py 9 1 89% src/util/__init__.py 0 0 100% src/util/util.py 2 0 100% ------------------------------------------ TOTAL 11 1 91% ========================================================================================= 2 passed in 0.08s =========================================================================================   カバレッジをHTMLで表示したい テストできているところ / いないところを確認する $ pytest --cov=src --cov-report=html コマンドを実行したフォルダ配下にhtmlcovフォルダが作成されている。フォルダ内のindex.htmlを開くとファイルごとのカバレッジが表示されている。それぞれリンクになっていて、クリックするとテストができているところとそうでないところを確認することができる。\nsrc/main.pyをクリックするとどこがテストできていないのかすぐわかる。\nテスト結果のサマリをHTMLで表示する pytest-htmlをインストールする。\n1 2 3 4 5 6  # インストール $ pip install pytest-html # 実行方法 # --html=\u0026lt;出力したいファイル名\u0026gt; $ pytest . --html=cov.html   以下のように試験結果が表示される。\nテスト対象外のファイルを設定したい pytest対象外としたいファイルがある時の設定方法。\nrootディレクトリに.coveragercを作成する（今回の例ではsrc, testsフォルダと同じ階層に作成）\n. ├── src ├── tests └── .coveragerc .coveragercに対象外としたいフォルダやファイル名を記述する。\n1 2 3 4  [run] omit =# __init__.py ファイルはテスト対象外とする */__init__.py   試験を実行すると設定したフォルダやファイルがテスト対象外となっている。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  $ pytest --cov=src ======================================================================================== test session starts ======================================================================================== platform darwin -- Python 3.9.0, pytest-6.2.1, py-1.10.0, pluggy-0.13.1 rootdir: /Users/hogehoge/ plugins: html-3.1.1, metadata-1.11.0, cov-2.10.1 collected 2 items tests/test_main.py .. [100%] ---------- coverage: platform darwin, python 3.9.0-final-0 ----------- Name Stmts Miss Cover -------------------------------------- src/main.py 9 1 89% src/util/util.py 2 0 100% -------------------------------------- TOTAL 11 1 91% ========================================================================================= 2 passed in 0.09s =========================================================================================   テストで失敗した時にメッセージを出力したい assert後にカンマ(,)をつけ、その後メッセージを書く。\n1 2 3 4 5 6 7  def test_main_failure_1(): # 試験データ a = 1 b = 5 # テストに失敗した時メッセージが表示される assert a == b, \u0026#34;a not equal b\u0026#34;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  pytest tests/test_main_failure.py ======================================================================================== test session starts ======================================================================================== platform darwin -- Python 3.9.0, pytest-6.2.1, py-1.10.0, pluggy-0.13.1 rootdir: /Users/hogehoge/ plugins: html-3.1.1, metadata-1.11.0, cov-2.10.1 collected 1 item tests/test_main_failure.py F [100%] ============================================================================================= FAILURES ============================================================================================== ________________________________________________________________________________________ test_main_failure_1 ________________________________________________________________________________________ def test_main_failure_1(): # 試験データ a = 1 b = 5 # 想定値 \u0026gt; assert a == b, \u0026#34;a not equal b\u0026#34; E AssertionError: a not equal b E assert 1 == 5 tests/test_main_failure.py:7: AssertionError ====================================================================================== short test summary info ====================================================================================== FAILED tests/test_main_failure.py::test_main_failure_1 - AssertionError: a not equal b ========================================================================================= 1 failed in 0.05s =========================================================================================   どんなデータが入っていてもassertの結果をTrueにしたい時 pytestではなく、標準ライブラリとして用意されているunittestのANYを利用することで可能。 滅多に使うケースはないが、知っているとすごく便利。例えばmockにした関数に渡された引数のassertをしたいがその一部が実行時点のタイムスタンプやランダム値など予測不能な値である場合に対象項目の予測値にANYを利用する。\nどんなデータでも通ってしまうので利用する時は注意が必要。。\n1 2 3 4 5 6 7 8  from unittest.mock import ANY def test_main_any_1(): # 試験データ a = None # こんなassertも問題なく通る assert a == ANY   参考 大変参考にさせていただきました。ありがとうございます。\n PyPi(pytest) pytest入門 - 闘うITエンジニアの覚え書き 知っておくと便利！Pytestコマンドライン小ネタ集 .coveragercの書き方について  ","description":"","id":4,"section":"posts","tags":["Python","test","pytest"],"title":"pytestを使ってみる①【準備・実行編】(python3.9.0)","uri":"https://www.anypalette.com/ja/posts/20201231_how_to_pytest_1/"},{"content":"概要 Hugoで自分専用のブログサイトを作ったものの、記事を追加する度にDomainの設定が初期化されるという問題発生。\nこのままだと記事を描くのが億劫になってしまうので対処する。\n対処内容 こちらが大変参考になりました。\n https://tech-wafter.net/2020/deploy-custom-domain-github-pages-on-github-actions/ https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-disable-nojekyll  今のCIの設定をみてみると確かにcname入ってなかった。。。追加してpushしたらドメインの設定そのままになっていた。\nよかった！！！\n1 2 3 4 5 6 7  - name:Deployuses:peaceiris/actions-gh-pages@v3with:deploy_key:${{ secrets.ACTIONS_DEPLOY_KEY }}publish_dir:./publicpublish_branch:main cname:www.anypalette.com # \u0026lt;-追加した  ","description":"","id":5,"section":"posts","tags":["github"],"title":"Github Pagesのドメイン設定が初期化される","uri":"https://www.anypalette.com/ja/posts/20201219_github-action/"},{"content":"概要 macをもらってまずやるzshとpreztoのセットアップ手順についてまとめる。\nzshとpreztoが何かについては割愛する。\n作業手順 zshのセットアップ 最近のMacはログインシェルの設定がデフォルトでzshになっている。\nchsh -s /bin/zsh でログインシェルの変更が可能だが、Macの場合システム環境設定にログインシェルの設定がある。\niTerm2を利用している場合、コマンドからログインシェルを変更してもシステム環境設定からログインシェルの変更をしないと反映されないため注意が必要。\nログインシェルの確認方法 システム環境設定 → ユーザとグループ を選択\n鍵マークをクリックし、ユーザID, パスワードを入力\nユーザ情報を右クリックし、詳細オプション を選択する\nログインシェルに設定されているシェルの種類を確認する。\npreztoのセットアップ macにzsh入っていたため続いてpreztoのセットアップを行う。\npreztoのリポジトリをcloneする\n1  $ git clone --recursive https://github.com/sorin-ionescu/prezto.git \u0026#34;${ZDOTDIR:-$HOME}/.zprezto\u0026#34;   インストール, prezto設定ファイルの作成\n1 2 3 4  $ setopt EXTENDED_GLOB for rcfile in \u0026#34;${ZDOTDIR:-$HOME}\u0026#34;/.zprezto/runcoms/^README.md(.N); do ln -s \u0026#34;$rcfile\u0026#34; \u0026#34;${ZDOTDIR:-$HOME}/.${rcfile:t}\u0026#34; done   設定ファイルの修正(~/.zpreztorc)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  $ vi ~/.zpreztorc # 以下を貼り付ける zstyle \u0026#39;:prezto:load\u0026#39; pmodule \\  \u0026#39;environment\u0026#39; \\  \u0026#39;terminal\u0026#39; \\  \u0026#39;editor\u0026#39; \\  \u0026#39;history\u0026#39; \\  \u0026#39;directory\u0026#39; \\  \u0026#39;spectrum\u0026#39; \\  \u0026#39;utility\u0026#39; \\  \u0026#39;completion\u0026#39; \\  \u0026#39;autosuggestions\u0026#39; \\  \u0026#39;syntax-highlighting\u0026#39; \\  \u0026#39;git\u0026#39; \\  \u0026#39;prompt\u0026#39;   powerline のインストール、設定 preztoなどのテーマにはpowerlineというフォントが使われていることが多くあり、デフォルトでインストールされていないためそのままだと文字化けして表示されてしまう。\n文字化けしないようにインストールする。\niTerm2やVSCodeを利用している場合は、そちらのterminalも文字化けしないように設定する必要がある。\nインストール git(powerline/fonts) をcloneしてインストール用のshellを叩くのが良い。\n1 2 3 4 5 6  $ git clone https://github.com/powerline/fonts.git $ sh ./install.sh Copying fonts... Resetting font cache, this may take a moment... Powerline fonts installed to /Users/ayaka/Library/Fonts   設定（VSCode） VSCodeから設定（setting.json）を開く。\n検索ボックスに terminal.integrated.fontFamily を入力し検索する。\nテキストボックスに Source Code Pro for Powerline を入力する。terminalの文字化けが直らない場合はVSCodeを再起動する。\n設定（iTerm2） profiles → Text → Font より好きなフォントを選ぶ。\n参考 参考にさせていただきました。ありがとうございます。\n https://qiita.com/s_s_satoc/items/e3c1b9b3545fd572dd1c  ","description":"","id":6,"section":"posts","tags":["zsh","mac"],"title":"zsh, preztoのセットアップ【Mac】","uri":"https://www.anypalette.com/ja/posts/20201214_install-zsh/"},{"content":"概要 改行コードにも種類がある。CRやらLFやらCRLFやら。\n一般的にはこんな感じらしい。\n CR：Mac系 LF：Linux系 CRLF：Windows系  Mac（Linux系）でファイルの改行コードってどうやって確認するんだっけか。となったのでメモ。\nMac（Linux系） の場合 odコマンドで簡単に調べることができた。\n1 2 3 4  # 改行コードにLFが使われている $ od -c sample.txt 0000000 h e l l o \\n w o r l d \\n 0000014   Windowsの場合 Windowsの場合はバイナリエディタ（Stirlingとか）をインストールしてファイルを開くことで確認できる。\nバイナリ（16進数）でファイルを開く。\n 0A：CR 0D：LF 0A0D：CRLF  10進数表記でファイル開いて確認する（CRLFは\u0026quot;13 10\u0026quot;）でも良いが、16進数の方が視覚的にわかりやすく感じる。\n","description":"","id":7,"section":"posts","tags":["linux"],"title":"ファイルの改行コードを確認する","uri":"https://www.anypalette.com/ja/posts/20201126_file-line-feed-code/"},{"content":"背景 処理の結果に応じて自動的にメールを送信する機能を作りたかった。\n最終的にファイルを添付したメールを送れるようにしたい。\n試してみる。\n試してみる [step1] aws cliを利用したメールの送信方法 AWSCLIを利用して送るとどうなるのか試してみた。\nリージョンはオレゴンで利用していたのでオレゴンのIDを指定。\n1 2 3 4 5 6  $ aws --region us-west-2 --profile=\u0026lt;プロファイル名\u0026gt; ses send-email --to send_to@example.com --from send_from@example.com --subject sample --text \u0026#34;`echo -e hogehoge`\u0026#34; # 送信完了するとMessageIdが表示される # { # \u0026#34;MessageId\u0026#34;: \u0026#34;01010175efc9f343-a80ee339-a377-4228-bbfb-83c3d2e4ad40-000000\u0026#34; # }   使っていたgmailを宛先にして実施し、送信後メールボックスを確認すると無事にメールが届いていた！\n次はファイルを添付して送信してみたいところだが、aws cliでファイルを添付する方法がすぐに検索できなかった。。。\nそのため、次はpython(boto3)を利用してメールを送れるように試してみる。\n[step2] python(boto3)を利用してメールを送信する ファイルの添付などせず、そのまま送信する。\n以下のサイトが参考になった。\n boto3 Docs(SES) PythonでAmazon SESからメールを送ってみた（Qiita）  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  import boto3 client = boto3.client( \u0026#39;ses\u0026#39;, aws_access_key_id=\u0026#39;YourAccessKey\u0026#39;, # アクセスキー aws_secret_access_key=\u0026#39;YourSecretKey\u0026#39;, # シークレットキー region_name = \u0026#39;us-west-2\u0026#39; # リージョン（今回はオレゴン） ) # メール送信 client.send_email( Source = \u0026#39;from@example.com\u0026#39;, # 送信元メールアドレス Destination = { \u0026#39;ToAddresses\u0026#39;: [\u0026#39;to@example.com\u0026#39;] # 宛先メールアドレス }, Message = { \u0026#39;Subject\u0026#39;: { \u0026#39;Data\u0026#39;: \u0026#39;title\u0026#39;, \u0026#39;Charset\u0026#39;: \u0026#39;UTF-8\u0026#39; }, \u0026#39;Body\u0026#39;: { \u0026#39;Text\u0026#39;: { \u0026#39;Data\u0026#39;: \u0026#39;hello\u0026#39;, \u0026#39;Charset\u0026#39;: \u0026#39;UTF-8\u0026#39; } } } )   [step3] ファイルを添付してメールを送信する（python, boto3） 公式をみてみると、ファイルを添付してメールを送信する場合、send_emailではなくsend_raw_emailを利用するらしい。\nsend_raw_emailはsend_emailと引数が異なるため少し詰まった。\n公式にある例を参考にしてなんとかメールを送信することはできた。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  import boto3 client = boto3.client( \u0026#39;ses\u0026#39;, aws_access_key_id=\u0026#39;YourAccessKey\u0026#39;, aws_secret_access_key=\u0026#39;YourSecretKey\u0026#39;, region_name = \u0026#39;us-west-2\u0026#39; ) # メール送信 client.send_raw_email( Source = \u0026#39;from@example.com\u0026#39;, # 送信元メールアドレス Destinations=[ # 送信先メールアドレス \u0026#34;to_1@example.com\u0026#34;, \u0026#34;to_2@example.com\u0026#34; ], RawMessage={ \u0026#39;Data\u0026#39;: \u0026#39;Subject: Test email (contains an attachment)\\nMIME-Version: 1.0\\nContent-type: Multipart/Mixed; boundary=\u0026#34;NextPart\u0026#34;\\n\\n--NextPart\\nContent-Type: text/plain\\n\\nThis is the message body.\\n\\n--NextPart\\nContent-Type: text/plain;\\nContent-Disposition: attachment; filename=\u0026#34;attachment.txt\u0026#34;\\n\\nThis is the text in the attachment.\\n\\n--NextPart--\u0026#39;, }, )   受信されたメールをみてみると、\nThis is the text in the attachment. という内容ファイル（attachment.tx）が添付されたメールが届いていた。\nまた、Destinationsに複数設定すると複数のメールアドレスがToに設定されるものかと思ったが、そうではなく、それぞれ別々のメールとして送信されているようだった。\n一応メールを送信することはできたものの、あまりにも不格好なのでもう少しやってみる。\nTo, Cc, Bccや添付ファイルの中身、内容などを全てRawMessageに含めるのではなく、それぞれ分けて設定できるようにしたい。\n(最悪最後にRawMessageとして結合するしかないのかもだが。。。)\nこのあたりを参考に。。\n https://stackoverrun.com/ja/q/11824951 https://blog.serverworks.co.jp/tech/2018/12/16/ses_lambda_attachment/  作ったサンプルソースがこちら。\n最初よりかなりよくなった。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54  import boto3 from email.mime.application import MIMEApplication from email.mime.multipart import MIMEMultipart from email.mime.text import MIMEText class Email(object): def __init__(self, frm, to, subject): self.frm = frm self.to = to self.subject = subject self.text = None self.attachment = None def send(self): client = boto3.client( \u0026#34;ses\u0026#34;, aws_access_key_id=\u0026#34;YourAccessKey\u0026#34;, aws_secret_access_key=\u0026#34;YourSecretKey\u0026#34;, region_name=\u0026#34;us-west-2\u0026#34;, ) # メール送信 msg = MIMEMultipart() msg[\u0026#34;Subject\u0026#34;] = self.subject msg[\u0026#34;From\u0026#34;] = self.frm msg[\u0026#34;To\u0026#34;] = self.to filepath = \u0026#34;/tmp/attachment.txt\u0026#34; # 添付ファイルの絶対パス part = MIMEApplication(open(filepath, \u0026#34;rb\u0026#34;).read()) part.add_header(\u0026#34;Content-Disposition\u0026#34;, \u0026#34;attachment\u0026#34;, filename=\u0026#34;添付ファイル.txt\u0026#34;) msg.attach(part) part = MIMEText(\u0026#34;sample mail\u0026#34;) # メッセージBody msg.attach(part) client.send_raw_email( RawMessage={ \u0026#34;Data\u0026#34;: msg.as_string(), }, Destinations=[], ) if __name__ == \u0026#34;__main__\u0026#34;: email = Email( frm=\u0026#34;from@example.com\u0026#34;, to=\u0026#34;to_1@example.com\u0026#34;, subject=\u0026#34;件名\u0026#34; ) # you could use StringIO.StringIO() to get the file value email.send()   受信したメールをみてみると添付ファイル.txtという名前のファイルが添付されていて、中身は指定した/tmp/attachment.txtと一致した。\nメールと MIME オブジェクトを作るライブラリを利用してデータを設定し、最後にas_string()｀でstringにしてData`に設定するとメールの作成が結構楽になりそう。\n公式（https://docs.python.org/ja/3/library/email.mime.html）も参考にすると良さそうだ。\n","description":"","id":8,"section":"posts","tags":["aws","ses"],"title":"【AWS, SES】python(boto3)を利用してメールを送信する","uri":"https://www.anypalette.com/ja/posts/20201122_ses-for-python/"},{"content":"いつもと違う環境でvimの短径選択を使ってインデントしたらtabでインデントされ困った（yamlファイルを修正したかったので余計に\u0026hellip;）。\nこの設定ですっきり解決した\n1 2  # tab入力が半角スペースに置換される :set expandtab   ついでにこの設定も覚えておきたい\n1 2 3 4 5  # タブ入力時の文字数を設定（デフォルトは8文字らしい） :set ts=4 # インデントする時の文字数を設定したい時 :set shiftwidth=4   ","description":"","id":9,"section":"posts","tags":["vim"],"title":"【vim】tab入力時スペースに置換したい","uri":"https://www.anypalette.com/ja/posts/20201031_indent-vim/"},{"content":"作ったブログに新しい記事を作成しよう思ったらそもそもサーバが起動しなくなった汗\n1 2 3 4 5 6 7 8 9 10  $ hugo server Start building sites … DEPRECATION WARNING on line 4 of /Users/ayaka/Git/blog/blog_bk2/themes/zzo/assets/sass/abstracts/_mixins.scss: !global assignments won\u0026#39;t be able to declare new variables in future versions. Consider adding `$theme-map: null` at the top level. ERROR 2020/10/31 20:05:47 Failed to get JSON resource \u0026#34;https://api.instagram.com/oembed/?url=https://www.instagram.com/p/BGvuInzyFAe/\u0026amp;amp;maxwidth=640\u0026amp;amp;omitscript=true\u0026#34;: Get \u0026#34;https://api.instagram.com/oembed/?url=https://www.instagram.com/p/BGvuInzyFAe/\u0026amp;amp;maxwidth=640\u0026amp;amp;omitscript=true\u0026#34;: dial tcp: lookup api.instagram.com: no such host ERROR 2020/10/31 20:05:47 Failed to get JSON resource \u0026#34;https://api.instagram.com/oembed/?url=https://www.instagram.com/p/BGvuInzyFAe/\u0026amp;amp;maxwidth=640\u0026amp;amp;omitscript=true\u0026#34;: Get \u0026#34;https://api.instagram.com/oembed/?url=https://www.instagram.com/p/BGvuInzyFAe/\u0026amp;amp;maxwidth=640\u0026amp;amp;omitscript=true\u0026#34;: dial tcp: lookup api.instagram.com: no such host Built in 6159 ms Error: Error building site: logged 2 error(s)  \nちょうど2日前に対応してくださったとな。ありがたや。\nhttps://github.com/zzossig/hugo-theme-zdoc/issues/34\nthemeのリポジトリはsubmoduleでもってきていたので、最新版にする。submoduleは一度ハマるときつい\u0026hellip;\n1  $ git submodule update --remote --merge  \nこれでどうだ！\n1 2 3 4 5 6  $ hugo server Start building sites … ERROR 2020/10/31 20:08:59 Failed to get JSON resource \u0026#34;https://api.instagram.com/oembed/?url=https://www.instagram.com/p/BGvuInzyFAe/\u0026amp;amp;maxwidth=640\u0026amp;amp;omitscript=true\u0026#34;: Failed to retrieve remote file: Bad Request ERROR 2020/10/31 20:08:59 Failed to get JSON resource \u0026#34;https://api.instagram.com/oembed/?url=https://www.instagram.com/p/BGvuInzyFAe/\u0026amp;amp;maxwidth=640\u0026amp;amp;omitscript=true\u0026#34;: Failed to retrieve remote file: Bad Request Built in 7151 ms Error: Error building site: logged 2 error(s)   まだエラー\u0026hellip;\nインスタグラムのapiがうまいこと実行できてないみたい。\n作成した記事にはインスタグラムのapiを叩いているところはないので、雛形ファイルかテンプレで作成されていた記事のあたりが怪しそう。\ncontent/en/posts/my-first-post.md に↓の様な記述が。\nここでインスタグラムにアクセスしていそう\u0026hellip;\n ## Instagram Simple Shortcode instagram_simple BGvuInzyFAe hidecaption \u0026lt;br\u0026gt; 特別すぐに削除する必要もなかったので今後の参考も兼ね残しておいたファイルが悪さをしていたよう。\n不要のため、content/en/posts/xxx.mdファイルをすべからく削除し、hugo serverを実行したら起動できた。\nhttps://xxx.com/ja で404が出る 上記の対応を行ってデプロイしたら、今までアクセスできていたURLで404が返ってきた。ぐぬ。\nhttps://xxx.com/ja/postとかhttps://xxx.com/enとかではアクセスできるみたい。\nissue漁ってみたら少し前に対応してる人がいた。\nhttps://github.com/zzossig/hugo-theme-zzo/issues/335\n同じことを試してみる。custom_scssは設定がなかったため、config.tomlに設定してassets/scss/custom.scssを作成するところから。\nデプロイしたらいつも通りhttps://xxx.com/jaでアクセスできた。\nﾔｯﾀﾈ\n","description":"","id":10,"section":"posts","tags":["hugo"],"title":"Zzo themeの最新化","uri":"https://www.anypalette.com/ja/posts/20201031_blog_fix/"},{"content":"経緯 今までメモがてら使っていたサイトの閉鎖に伴い、いよいよ自分で作ることを決意。\nGitHub Pagesを使うとタダ！でできるのでそれでやってみる。\n静的サイトジェネレータはいくつかあったが、お試しでHUGOでやってみた。\n作ってみる インストール, サンプル起動 公式の手順を見ながら構築していく\n1 2 3 4 5 6 7  $ brew install hugo $ hugo version # -\u0026gt; Hugo Static Site Generator v0.76.3/extended darwin/amd64 BuildDate: unknown $ hugo new site quickstart $ cd quickstart $ git init   themeは公式から自分の気に入るのを探してsubmodule化して追加する（zzoを利用することにした）。\n1  $ git submodule add https://github.com/zzossig/hugo-theme-zzo.git themes/zzo   もうblogを立ち上げられるらしい。\n試しに立ち上げてみる\n1 2 3 4 5  $ cd themes/zzo/exampleSite $ hugo server --themesDir ../.. # Serving pages from memory # Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender # Web Server is available at http://localhost:1313/ (bind address 127.0.0.1)   http://localhost:1313/にアクセスしたら公式のthemeと同じものが出てきた。しゅごい\u0026hellip;\nCI/CDを設定する GitHub Actionを使い、ビルド〜デプロイを自動でやってもらうようにする。\nここを見ながらこんな感じのCIを作成した。\ngh-pagesブランチにpushすると発火し、mainブランチにデプロイされる。\nname: github pages on: push: branches: - gh-pages # 発火させたいブランチ名を設定 jobs: deploy: runs-on: ubuntu-18.04 steps: - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: latest extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} publish_dir: ./public publish_branch: main # デプロイ対象のブランチ名を設定 GitHub Actionを利用するのは初めてだったが\u0026hellip;少し詰まった\n GitHub_Token を利用すると初回デプロイに必ず失敗する\n公式にも説明があるが、GitHub_Tokenには利用するのに制限があるらしく、初回デプロイ時に失敗するらしい。\n正直よくわらからなかったと、deploy_keyを利用してSSH経由でpushすればそういう制限はないらしいので使うのをやめた。 ACTIONS_DEPLOY_KEY の利用に失敗する\nSecretsに登録した変数の名前を変えたらデプロイに失敗した。GitHub Pages専用変数のようなので名前を変えてはいけないよう。  自分好みにカスタマイズする 準備 Zzo公式に細かい設定が書いてある。が、一旦テンプレートをそのまま利用するのでカスタマイズする前にthemes/zzo/exampleSite/配下をrootにまるっとコピーしておくと良い。\nZzoの公式に全て書いてあるが\u0026hellip;今回私がカスタマイズしたところはこのあたり。\nホーム画面  タイトル,サブタイトルの変更\ncontent/en/_index.md このファイルをいじると色々カスタムできる。\nenは使う言語に応じて設定を修正する（まだjp設定できていないので一旦en配下を修正した）。  プロフィール   アバターの変更\nstatic/images/whoami/avatar.jpeg のファイルを適用したいものに差し替える\n  名前、プロフィール文の変更\nconfig/_default/params.tomlファイルを修正する。\n名前やプロフィール、SNSへのリンク先はwhoamiあたりを修正するとよい。\n  言語   デフォルト言語の変更\nデフォルトは英語なので日本語に設定変更する。\n1  defaultContentLanguage = \u0026#34;ja\u0026#34;     言語の設定にjaを加える\n1 2 3 4  [ja] title = \u0026#34;Hugo Zzo Theme\u0026#34; languageName = \u0026#34;日本語\u0026#34; weight = 1     content/[言語] のコピー\n上記の設定だけではエラーが出てきた。\ncontentなど言語ごとにフォルダが分かれているものがあったのでja用を作成する。\n1  $ cp content/en content/ja   何も表示されない。まだ何か足りないらしい。\nconfig配下にmenus.en.tomlがあった。\n細かいチューニングは置いといて、一旦Copy、Renameしてそのままjaファイルとする。\n1  $ cp -a config/_default/menus.en.toml config/_default/menus.ja.toml   コンテンツ表示された。心なしかあひるも少し嬉しそう。\n  表示言語切り替え機能の無効化\n英語はしばらく使うことなさそうだがそのうち英語でも\u0026hellip;という日が来るかもしれないのでそのままにしておくことにする。\nその間表示言語の切り替え機能は無効化しておく。\n1 2 3 4 5 6  # footer showPoweredBy = true showFeedLinks = true showSocialLinks = true enableLangChange = false # ここを修正 enableThemeChange = true     参考 構築時にとても参考になりました。\n  GitHub Pages × Hugo で技術ブログを始めた: https://reona.dev/posts/20200331\n  Hugoで記事内に画像を貼り付ける方法 : https://qiita.com/atuyosi/items/4100bd502e373c088c74\n  Hugo(quickstart) : https://gohugo.io/getting-started/quick-start/\n  GitHubAction(GitHubPages, Hugo) : https://github.com/peaceiris/actions-gh-pages\n  ","description":"","id":11,"section":"posts","tags":["hugo","github"],"title":"Hugo + GithubPages でブログを構築する","uri":"https://www.anypalette.com/ja/posts/1012_first_post/"},{"content":"決済系SIerとして大規模クレジットカード決済システムの保守/運用, 維持開発に4年従事してました。その後一般事務のお仕事を何年かしましたが、訳があったのとご縁に恵まれ再びIT業界でお仕事させていただくことになりました。\n現在はキャッシュレス決済システムの開発・運用のお仕事をしています。\nサーバサイド~インフラがメインです。フロントも好きです。\n 言語：Java, Go, Javascript, VB クラウド：AWS その他：Kubernetes, MySQL, MongoDB(DynamoDB) 等  ","description":"Hugo, the world’s fastest framework for building websites","id":12,"section":"","tags":null,"title":"About","uri":"https://www.anypalette.com/ja/about/"},{"content":"この記事は2019/12/01にQrunchに掲載した内容です。\n（Qrunchのサービス終了に伴いこちらに引っ越ししました）  背景 flaskで簡単なWebアプリを作りたい！\n環境構築はDocker（docker-compose）でやりたいなぁ。\nやりながら忘れないようにメモメモ。\nソースはこちら\n目標 docker-composeを利用してflask + mysqlの環境を構築する\n flaskからmysqlへ接続できること 起動したwebアプリへローカルから接続できること  ファイル構成 全体的にこんな感じのフォルダ構成。\nflaskはflask-appbuilderを使う予定。\nflask_sample ├ docker-compose.yml ├ db ├ Dockerfile └ my.cnf └ flask ├ Dockerfile └ requirements.txt docker-compose.yml tty: trueを設定するとコンテナが起動しっぱなしになるのでデバッグしたい時とかに便利。設定を削除する場合はcommandにflask runなどのコマンドを設定すること。\nアプリ開発が軌道にのるまではオンにしておくと便利そう。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  version:\u0026#34;3\u0026#34;services:web:build:./flaskvolumes:- ./flask:/appports:- 5000:5000links:- dbtty:truedb:build:./dbenvironment:MYSQL_ROOT_PASSWORD:rootMYSQL_DATABASE:flaskMYSQL_USER:flaskMYSQL_PASSWORD:flaskTZ:\u0026#39;Asia/Tokyo\u0026#39;command:mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_binvolumes:- ./db/data:/var/lib/mysql- ./db/my.cnf:/etc/mysql/conf.d/my.cnf- ./db/sql:/docker-entrypoint-initdb.d- ./db/log:/var/log/mysqlports:- 3306:3306  db 設定ファイル Dockerfile 特にすることがなければDockerfileにしなくてもOK。\nその時はdocker-compose.ymlのbuild: ./dbのところをimage: mysql:5.7に修正する。\n1  FROMmysql:5.7  mysql設定ファイル（my.cnf） 1 2 3 4 5 6 7  [mysqld] character-set-server=utf8mb4 general-log=1 general-log-file=/var/log/mysql/mysqld.log #ログの出力先 [client] default-character-set=utf8mb4   flask 設定ファイル Dockerfile 1 2 3 4 5 6 7 8 9 10 11 12  FROMpython:3.7.5ARG app_dir=/app/ADD requirements.txt $app_dirWORKDIR$app_dirRUN pip install --upgrade pip# 利用するパッケージがかたまるまでコメントアウトしてても良さそうRUN pip install -r requirements.txt  requirements.txt apispec==1.3.3 attrs==19.3.0 Babel==2.7.0 Click==7.0 colorama==0.4.1 defusedxml==0.6.0 Flask==1.1.1 Flask-AppBuilder==2.2.0 Flask-Babel==0.12.2 Flask-JWT-Extended==3.24.1 Flask-Login==0.4.1 Flask-OpenID==1.2.5 Flask-SQLAlchemy==2.4.1 Flask-WTF==0.14.2 importlib-metadata==1.0.0 itsdangerous==1.1.0 Jinja2==2.10.3 jsonschema==3.2.0 MarkupSafe==1.1.1 marshmallow==2.19.5 marshmallow-enum==1.5.1 marshmallow-sqlalchemy==0.19.0 more-itertools==8.0.0 mysqlclient==1.4.6 prison==0.1.2 PyJWT==1.7.1 pyrsistent==0.15.6 python-dateutil==2.8.1 python3-openid==3.1.0 pytz==2019.3 PyYAML==5.1.2 six==1.13.0 SQLAlchemy==1.3.11 SQLAlchemy-Utils==0.35.0 Werkzeug==0.16.0 WTForms==2.2.1 zipp==0.6.0 コンテナを起動する 1 2 3 4  # Dockerfileを元にコンテナのイメージを構築する $ docker-compose build # コンテナ起動 $ docker-compose up   起動後の確認 コンテナ起動確認 docker psコマンドもしくはdocker-compose psコマンドを利用して今起動しているコンテナの一覧を確認してみる。\n# StateがUpになってればOK $ docker-compose ps Name Command State Ports ---------------------------------------------------------------------------------------- flask_db_1 docker-entrypoint.sh mysql ... Up 0.0.0.0:3306-\u0026gt;3306/tcp, 33060/tcp flask_web_1 python3 Up 0.0.0.0:5000-\u0026gt;5000/tcp やったね！\nネットワークの確認 flaskとmysqlが同一のネットワーク上にいるか確認する。\ndocker network lsあたりのコマンドから確認しても良いが、skanehiraさん（ゴリラさん）のdocuiを入れておくとめっちゃ便利！（神ありがたや！！）\nこちらがdocuiの実行画面。\nちゃんと同じネットワーク上にflaskとmysqlがわかる！\n詳細をみてみる\u0026hellip;\nローカルからはlocalhost(127.0.0.1)でアクセスする。\nflaskの起動 ようやくflaskの起動へ。色々自分で一から作るのは大変なので、ユーザ管理とかテンプレートが充実しているflask-appbuilderを利用することに。\nflask-appbuilderからスケルトンの作成 # 起動したコンテナに入って作業（docker exec -it [コンテナID] /bin/sh） /app # flask fab create-app Your new app name: app Your engine type, SQLAlchemy or MongoEngine (SQLAlchemy, MongoEngine) [SQLAlchemy]: Downloaded the skeleton app, good coding! flask設定ファイル修正 作成したflaskのスケルトンアプリフォルダ配下にあるconfig.pyを修正する。\n修正内容は以下の通り。\n 日本語を利用するためのエンコード設定（utf8） 接続先データベースの設定 デフォルト言語設定  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  #coding:utf8 # \u0026lt;-- 日本語を利用するための設定. 一番上に追加する ... # The SQLAlchemy connection string. # SQLALCHEMY_DATABASE_URI = \u0026#34;sqlite:///\u0026#34; + os.path.join(basedir, \u0026#34;app.db\u0026#34;) # \u0026#39;mysql://[User]:[Password]@[Host]/[Database]\u0026#39; # パスワードはなるべく直書きしないように（ゆくゆくは環境変数へ...） SQLALCHEMY_DATABASE_URI = \u0026#39;mysql://root:root@db/app\u0026#39; ... # 日本語の設定を追加し、デフォルトの言語を日本語にする # --------------------------------------------------- # Babel config for translations # --------------------------------------------------- # Setup default language BABEL_DEFAULT_LOCALE = \u0026#34;ja\u0026#34; # Your application default translation path BABEL_DEFAULT_FOLDER = \u0026#34;translations\u0026#34; # The allowed translation for you app LANGUAGES = { \u0026#34;en\u0026#34;: {\u0026#34;flag\u0026#34;: \u0026#34;gb\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;English\u0026#34;}, \u0026#34;pt\u0026#34;: {\u0026#34;flag\u0026#34;: \u0026#34;pt\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Portuguese\u0026#34;}, \u0026#34;pt_BR\u0026#34;: {\u0026#34;flag\u0026#34;: \u0026#34;br\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Pt Brazil\u0026#34;}, \u0026#34;es\u0026#34;: {\u0026#34;flag\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Spanish\u0026#34;}, \u0026#34;de\u0026#34;: {\u0026#34;flag\u0026#34;: \u0026#34;de\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;German\u0026#34;}, \u0026#34;zh\u0026#34;: {\u0026#34;flag\u0026#34;: \u0026#34;cn\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Chinese\u0026#34;}, \u0026#34;ru\u0026#34;: {\u0026#34;flag\u0026#34;: \u0026#34;ru\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Russian\u0026#34;}, \u0026#34;pl\u0026#34;: {\u0026#34;flag\u0026#34;: \u0026#34;pl\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Polish\u0026#34;}, \u0026#34;ja\u0026#34;: {\u0026#34;flag\u0026#34;: \u0026#34;jp\u0026#34;, \u0026#34;name\u0026#34;: u\u0026#34;日本語\u0026#34;}, }   adminユーザの登録 適当にadminユーザを作成する。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  flask fab create-admin Username [admin]: User first name [admin]: User last name [user]: Email [admin@fab.org]: Password: Password: ... 2019-12-01 10:04:56,305:INFO:flask_appbuilder.base:Registering class MyView on menu Method1 2019-12-01 10:04:56,306:INFO:flask_appbuilder.baseviews:Registering route /myview/method1/ (\u0026#39;GET\u0026#39;,) Recognized Database Authentications. 2019-12-01 10:04:56,450:INFO:flask_appbuilder.security.sqla.manager:Added user admin Admin User admin created. \u0026lt;-- adminユーザ作成成功！   Viewの修正 そのまま起動するとInternalServerErrorが出てしまう。\nせっかくなので適当なviewを設定する。\nview.pyをこんな感じに書き換える。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  from flask import render_template from flask_appbuilder.models.sqla.interface import SQLAInterface from flask_appbuilder import BaseView, expose, has_access, ModelView, ModelRestApi from . import appbuilder, db class MyView(BaseView): default_view = \u0026#39;method1\u0026#39; @expose(\u0026#39;/method1/\u0026#39;) @has_access def method1(self): # do something with param1 # and return to previous page or index return \u0026#39;Hello\u0026#39; appbuilder.add_view(MyView, \u0026#34;Method1\u0026#34;, category=\u0026#39;My View\u0026#39;) db.create_all()   flask起動 起動コマンド実行後、* Running on http://0.0.0.0:5000/  が出てくればOK。\n1 2 3 4 5 6 7  flask run --host 0.0.0.0 --port 5000 ... 2019-12-01 10:06:19,124:INFO:flask_appbuilder.api:Registering route /api/v1/menu/ [\u0026#39;GET\u0026#39;] 2019-12-01 10:06:19,218:INFO:flask_appbuilder.base:Registering class MyView on menu Method1 2019-12-01 10:06:19,218:INFO:flask_appbuilder.baseviews:Registering route /myview/method1/ (\u0026#39;GET\u0026#39;,) 2019-12-01 10:06:19,282:INFO:werkzeug: * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)   ローカルからアクセスする ローカルのブラウザからhttp://localhost:5000/へアクセスする。\nでけた。\nflask fab create-adminで作成したadminユーザでログインすることもできる。\n詰まったこと 最初、flaskのイメージにalpineを利用していたのだが、mysqlclientがpip installできなかった。\nalpineだとmysqlclientをインストールするためのパッケージが足りないみたい\u0026hellip;\nいずれalpineにして必要なパッケージのみaddしていい感じにしたい。\nまた、最初何も考えずにflask runコマンドを実行していたせいでローカルから接続できない事態に陥った。hostを指定せずに起動するとhttp://127.0.0.1:5000で起動するのだが、コンテナに割り当てられたIPアドレスは別のIPなのでローカルから接続できなかった。\nうっかりしてたww\nコンテナから起動するときは--hostオプションつけて、コンテナに割り当てられたIPアドレスか0.0.0.0で起動するように。\nソース ソースはこちら。\n","description":"","id":13,"section":"posts","tags":["docker"],"title":"flask + mysql の環境をDocker（docker-compose）で構築する","uri":"https://www.anypalette.com/ja/posts/20191201_flask-docker/"},{"content":"この記事は2019/09/24にQrunchに掲載した内容です。\n（Qrunchのサービス終了に伴いこちらに引っ越ししました）  背景 APIを開発するとき、色々なツールがありどれを使えばいいのか、\nそれぞれどのような特徴があるのかよくわからず迷いました。\nいくつか実際に使ってみた感想をまとめました。\nそのうち、それぞれの使い方について別途まとめたいと思います。\n設計書編 Swagger 有名なオープンソースフレームワーク。Web API開発する人は結構知っている人も多いかと思います。\nSwaggerにはいくつか種類があります。\n Swagger Editor：Web上でプレビューをみながら修正することができる。 Swagger UI：指定のyaml, jsonファイルを元にAPIリファレンスをWeb上に表示することが可能。叩いてみたいAPIを選択し、Web上から実行することもできる。  お手軽にWebから利用することもできますが、Dockerイメージが転がっているのでローカルにSwaggerコンテナをDocker Hub（Swagger）立てて利用することもできます。使ってみたいけどセキュリティ的にWebから使うって抵抗あるな\u0026hellip;という方や、チームで共有するときにSwaggerサーバを1台立てておくと非常に便利で良いと思います。\nまた、VsCodeをお使いの方は専用のプラグインがあります。\n編集するだけであればプラグインで十分かと思います。\nSwagger UIでAPIリファレンスを眺めていると、「これそのまんまAPI定義書にしちゃいたいわ」なんて欲が出てきます。そんなときはReDoc(GitHub)がおすすめです。\nSwaggerで書いたAPI定義ファイルを良さげなhtmlファイルに変換してくれます。例\nそのほかにもSwaggerからドキュメントを生成するツールがいくつかあるようです。\nこちら の記事にわかりやすくまとめてくれています。\nRe:VIEW こちらはAPIの設計書と直接的な関係はありませんが、設計書を書くことにおいて非常に便利なツールですので合わせてご紹介します。\nAPI定義を内部で利用するだけであればReDocのようなツールから生成したHTMLファイルだけで良いですが、お客様によってはかっちりとしたAPI設計書の提出を求められる場合があります。\n私の職場では設計書はwordで書き上げるのが一般的でしたが、面倒に感じることが多々あります\u0026hellip;\nそんなときにおすすめなのがRe:VIEWです。\nRe:VIEW用のMarkDown形式で書いた文書を良さげにPDF化してくれます。\n(他にもたくさんの機能がありますが、PDF化してくれる機能ももっています)\nlinterなどを利用することにより文書校正も可能です。\n専用のDockerファイルもありますので、面倒な環境構築もすることなく利用が可能です。\n(Docker Hub)\nPlant UML こちらもAPIの設計書と直接的な関係はありません。\nこれを知ってるかどうかで設計書修正のコストをだいぶ下げることができる（かもしれない）と思います(plantUML公式HP)。\nシーケンス図やクラス図をコードベースで書くことができます。\n設計内容をコード化することでGitでの管理が可能となるのが大きな利点だと思います。\n手書き風とか色を変えたりとか、見た目も少しいじることができます。\n似たようなものにmermaid jsというものがあります。\nこの辺は好みかと思います。\nまとめ  API全体の構成やユースケースの設計：PlantUML, mermaid js APIリファレンスやモックの作成：Swagger, (必要に応じて)ReDoc お客様へ別途資料の提出が必要な場合：Re:VIEW  というような使い分けが良いかと思います。\n","description":"","id":14,"section":"posts","tags":["tool"],"title":"API開発が捗るツールたち（設計書編）","uri":"https://www.anypalette.com/ja/posts/20190924_apitool/"},{"content":"この記事は2019/09/26にQrunchに掲載した内容です。\n（Qrunchのサービス終了に伴いこちらに引っ越ししました）  背景 DB（MySQL）の性能試験をしているときに、ダミーデータを素早く積み込みたい想いに駆られました。\n結果、私的にはtmpテーブルとMySQLのランダム関数を利用したデータの投入が一番早いやんww となりまして。\nその話もまたいずれ\u0026hellip;\n知っておくと便利なSQLなので、備忘も兼ねてまとめました。\nちなみにMySQLのクライアントツールはsequelがおすすめです。\n本家のクライアントアプリMySQL Workbenchもめっちゃいいですが、サクッと使いたい人はsequelで十分です。　ランダムデータ生成SQL ローカルでさっくり試してみたいけど環境構築が\u0026hellip;という方のため、後述でMySQLをコンテナで立てる方法を記載してますよかったら参考にしてください。\nちなみにMySQLで複数の文字列を結合して出力したい場合はconcatを使うとよかです。\n1 2 3 4 5 6  mysql\u0026gt; select concat(\u0026#39;SAM\u0026#39;, \u0026#39;PLE\u0026#39;, \u0026#39;00001\u0026#39;); +-------------------------------+ | concat(\u0026#39;SAM\u0026#39;, \u0026#39;PLE\u0026#39;, \u0026#39;00001\u0026#39;) | +-------------------------------+ | SAMPLE00001 | +-------------------------------+   select xxxという書き方はecho的なことがしたいなぁという時に使えるので、覚えておくと便利そうです。\nランダムデータ生成（文字列編） 英小文字 + 数字 32桁までのランダムデータを生成する場合はuuid()関数を利用するのが一番楽です。\n後述するチェックサムを利用する方法だと積みこむデータの量や長さよっては重複が結構発生して面倒です（私のデータ生成方法が悪いのか\u0026hellip;）。\n1 2 3 4 5 6  mysql\u0026gt; select concat(LEFT(REPLACE(uuid(),\u0026#39;-\u0026#39;,\u0026#39;\u0026#39;), 8)) as RandomData; +------------+ | RandomData | +------------+ | db8a8aff | +------------+   チェックサムを利用してデータを生成する場合はこちら\n1 2 3 4 5 6  mysql\u0026gt; select concat(LEFT(MD5(RAND()*100+1),8)) as RandomData; +------------+ | RandomData | +------------+ | 678b5019 | +------------+   各関数の詳細はMySQLの公式リファレンスを参照してください。\n RAND MD5  ざっくり説明すると、1.xxx ~ 100.xxx の少数を生成し、MD5関数を使ったチェックサムを生成、生成したチェックサムの左から引数に指定した桁数（今回は6桁）分切り取って返却しています。\nこの方法だと英語の大文字や記号入りません。\n固定長でいいから大文字や記号を入れたい時はこんな感じでデータを生成すれば良いです。\n1 2 3 4 5 6  mysql\u0026gt; select concat(\u0026#39;SAMPLE_\u0026#39;, LEFT(MD5(RAND()*100+1),6)) as RandomData; +---------------+ | RandomData | +---------------+ | SAMPLE_cc0c31 | +---------------+   特定の文字種を利用したランダムデータ RAND() * n のn には定義した文字種の桁数を設定してください。\n1 2 3 4 5 6 7 8 9  mysql\u0026gt; select CONCAT(substring(\u0026#39;あいうえおabcde12345\u0026#39;, CEIL(RAND() * 15),1) -\u0026gt; , substring(\u0026#39;あいうえおabcde12345\u0026#39;, CEIL(RAND() * 15),1) -\u0026gt; , substring(\u0026#39;あいうえおabcde12345\u0026#39;, CEIL(RAND() * 15),1) -\u0026gt; ) as RandomData; +------------+ | RandomData | +------------+ | 53え | +------------+   mysqlのユーザ定義変数を使うと少しだけ実行が楽になります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  mysql\u0026gt; SET @var1 = \u0026#39;あいうえおabcde12345\u0026#39;; Query OK, 0 rows affected (0.00 sec) mysql\u0026gt; select @var1 ; +---------------------------+ | @var1 | +---------------------------+ | あいうえおabcde12345 | +---------------------------+  mysql\u0026gt; select CONCAT(substring(@var1, CEIL(RAND() * 15),1) -\u0026gt; , substring(@var1, CEIL(RAND() * 15),1) -\u0026gt; , substring(@var1, CEIL(RAND() * 15),1) -\u0026gt; ) as RandomData; +------------+ | RandomData | +------------+ | あああ | +------------+   ランダムデータ生成（数字編） 1~100 まで\n1 2 3 4 5 6  mysql\u0026gt; select concat(ceil(rand() * 100 + 0)) as RandomData; +------------+ | RandomData | +------------+ | 51 | +------------+   1001 ~ 1099 まで\n1 2 3 4 5 6  mysql\u0026gt; SELECT CONCAT(CEIL(RAND() * 99 + 1000)) as RandomData; +------------+ | RandomData | +------------+ | 1085 | +------------+   ランダムデータ生成（日付編） 1 2 3 4 5 6  mysql\u0026gt; select FROM_UNIXTIME(UNIX_TIMESTAMP(\u0026#39;2019-03-01 00:00:00\u0026#39;) + FLOOR(0 + (RAND() * 86400))) as RandomData; +---------------------+ | RandomData | +---------------------+ | 2019-03-01 17:32:54 | +---------------------+   86400は1日間の秒数24*60*60 = 86400です。\nサクッとお試し環境構築手順 一応MySQLの環境構築設定もメモします。\nコンテナ（docker-compose）で構築します。\ndocker-composeファイルの作成 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  version:\u0026#39;3\u0026#39;services:# MySQLdb:image:mysql:5.7container_name:mysql_hostenvironment:MYSQL_ROOT_PASSWORD:rootMYSQL_DATABASE:test_databaseMYSQL_USER:dockerMYSQL_PASSWORD:dockerTZ:\u0026#39;Asia/Tokyo\u0026#39;command:mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_binvolumes:- ./db/data:/var/lib/mysql- ./db/my.cnf:/etc/mysql/conf.d/my.cnf- ./db/sql:/docker-entrypoint-initdb.dports:- 3306:3306  コンテナ起動 作成したdocker-compose.yamlファイルがあるパス上でdocker-compose upコマンドを実行する。\nmysqlが立ち上がったらローカルからmysql -uroot -h\u0026lt;hostnameコマンドの実行結果名\u0026gt; -pで実行し、パスワードはrootを入れてあげれば入れると思います。\nmysql-clientをダウンロードしていない場合はダウンロードしてから実行するか、docker exec -it でmysqlのコンテナにアタッチしてください。\n","description":"","id":15,"section":"posts","tags":["mysql"],"title":"MySQLでランダムデータを生成したい","uri":"https://www.anypalette.com/ja/posts/20190926_mysql-randamdata/"}]